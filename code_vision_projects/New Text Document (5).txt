/*******************************************************
This program was created by the
CodeWizardAVR V3.14 Advanced
Automatic Program Generator
Â© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
http://www.hpinfotech.com

Project : Password_Module_Trail_0
Version : 0
Date    : 11/15/2021
Author  : Mohamed Ibrahem
Company : Home
Comments: 
NO COMMENT


Chip type               : ATmega32A
Program type            : Application
AVR Core Clock frequency: 11.059200 MHz
Memory model            : Small
External RAM size       : 0
Data Stack size         : 512
*******************************************************/

#include <mega32a.h>

#include <delay.h>
#define LED_GREEN PORTB.0
#define LED_RED   PORTB.1

#define BUTTON1 PINA.0
#define BUTTON2 PINA.1
#define BUTTON3 PINA.2

#define ON  1
#define OFF 0
char counter=0;
char counter1=0;
char password_count=4;
int password = 1010; //flash
int entered = 0;


void main(void)
{

DDRB    = 0xff ;
PORTB   = 0x00 ;

DDRA    = 0xf0 ;
PORTA   = 0x00 ;
PORTA.0 = 1    ;
PORTA.1 = 1    ;
PORTA.2 = 1    ;


while (1)
      {
      if( BUTTON1 == 1){
        delay_ms(20);
        entered = 1  + entered * 10 * counter ;
        counter=1;
        counter1++;
        if(counter1 == password_count){
              if(entered == password){
                    LED_GREEN = ON;
                    delay_ms(50);
                    LED_GREEN = OFF;
                    counter=0;
                    counter1=0;           
                    }
              else if (entered != password){
                    LED_RED = ON;
                    delay_ms(50);
                    LED_RED = OFF;
                    counter=0;
                    counter1=0;           
                    }
                }         
        
        }
      else if( BUTTON2 == 1){
        delay_ms(20);
        entered = entered * 10 * counter ;
        counter=1;
        counter1++;
        if(counter1 == password_count){
              if(entered == password){
                    LED_GREEN = ON;
                    delay_ms(50);
                    LED_GREEN = OFF;
                    counter=0;
                    counter1=0;           
                    }
              else if (entered != password){
                    LED_RED = ON;
                    delay_ms(50);
                    LED_RED = OFF;
                    counter=0;
                    counter1=0;           
                    }
                }  
        }
      else if( BUTTON3 == 1){
            password_count=0;
            counter=0;
            password=0;
            LED_GREEN= ON;
            while (BUTTON3 == 1){
                   if( BUTTON1 == 1){
                        delay_ms(20);
                        password = 1  + password * 10 * counter ;
                        password_count++;
                        counter=1;      
                        }
                   else if( BUTTON2 == 1){
                        delay_ms(20);
                        password = 0  + password * 10 * counter ;
                        password_count++;
                        counter=1; 
                        }
                   if(BUTTON3 == 0){
                   break;
                   }
            }
            counter=0;
            counter1=0;
            entered = 0;
            LED_GREEN= OFF;
      
        /*
        delay_ms(20);
        if(entered == password){
           LED_GREEN = ON;
           delay_ms(50);
           LED_GREEN = OFF;
           counter=0;           
            }
        else if (entered != password){
           LED_RED = ON;
           delay_ms(50);
           LED_RED = OFF;
           counter=0;           
            }  */
            
                     
        }
      else{
        LED_GREEN = OFF;
        LED_RED   = OFF;
        }
        
      }
}